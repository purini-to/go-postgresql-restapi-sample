// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package main

import (
	"github.com/purini-to/go-postgresql-restapi-sample/app"
	"github.com/purini-to/go-postgresql-restapi-sample/controller/api"
	"github.com/purini-to/go-postgresql-restapi-sample/core/config"
	"github.com/purini-to/go-postgresql-restapi-sample/core/db"
	"github.com/purini-to/go-postgresql-restapi-sample/core/logger"
	"github.com/purini-to/go-postgresql-restapi-sample/middleware"
	"github.com/purini-to/go-postgresql-restapi-sample/router"
	"github.com/purini-to/go-postgresql-restapi-sample/server"
)

// Injectors from wire.go:

func InitializeApp() (*app.App, func(), error) {
	engine := server.ProvideEngine()
	zapLogger, err := logger.ProvideLogger()
	if err != nil {
		return nil, nil, err
	}
	cors := middleware.ProvideCors(zapLogger)
	log := middleware.ProvideLog(zapLogger)
	viper, err := config.ProvideConfig(zapLogger)
	if err != nil {
		return nil, nil, err
	}
	gormDB, cleanup, err := db.ProvideDB(viper, zapLogger)
	if err != nil {
		return nil, nil, err
	}
	consumerAPI := api.ProvideConsumerAPI(zapLogger, gormDB)
	routerRouter := router.ProvideRouter(cors, log, consumerAPI)
	serverServer := server.ProvideServer(engine, routerRouter)
	appApp := app.ProvideApp(serverServer)
	return appApp, func() {
		cleanup()
	}, nil
}
