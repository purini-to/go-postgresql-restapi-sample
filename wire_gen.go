// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package main

import (
	"github.com/purini-to/go-postgresql-restapi-sample/infrastructure/config"
	"github.com/purini-to/go-postgresql-restapi-sample/infrastructure/logger"
	"github.com/purini-to/go-postgresql-restapi-sample/infrastructure/persistence/datastore"
	"github.com/purini-to/go-postgresql-restapi-sample/interfaces/db"
	"github.com/purini-to/go-postgresql-restapi-sample/interfaces/http"
	"github.com/purini-to/go-postgresql-restapi-sample/interfaces/http/handler"
	"github.com/purini-to/go-postgresql-restapi-sample/interfaces/http/middleware"
	"github.com/purini-to/go-postgresql-restapi-sample/interfaces/http/router"
	"github.com/purini-to/go-postgresql-restapi-sample/usecase"
)

// Injectors from wire.go:

func InitializeServer() (*http.Server, func(), error) {
	mux := http.NewEngine()
	zapLogger, err := logger.NewLogger()
	if err != nil {
		return nil, nil, err
	}
	middlewareLogger := middleware.NewLogger(zapLogger)
	recoverer := middleware.NewRecoverer(zapLogger)
	viper := config.NewConfig(zapLogger)
	dbDB, cleanup, err := db.NewDB(viper)
	if err != nil {
		return nil, nil, err
	}
	system := datastore.NewSystem()
	usecaseSystem := usecase.NewSystem(zapLogger, dbDB, system)
	handlerSystem := handler.NewSystem(zapLogger, usecaseSystem)
	routerRouter := router.NewRouter(zapLogger, middlewareLogger, recoverer, handlerSystem)
	server := http.NewServer(mux, routerRouter, viper)
	return server, func() {
		cleanup()
	}, nil
}
